"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const hw_app_eth_1 = require("@ledgerhq/hw-app-eth");
const hw_transport_u2f_1 = require("@ledgerhq/hw-transport-u2f");
exports.Web3ProviderEngine = require("web3-provider-engine");
/**
 * A factory method for creating a LedgerEthereumClient usable in a browser context.
 * @return LedgerEthereumClient A browser client for the LedgerSubprovider
 */
function ledgerEthereumBrowserClientFactoryAsync() {
    return __awaiter(this, void 0, void 0, function* () {
        const ledgerConnection = yield hw_transport_u2f_1.default.create();
        const ledgerEthClient = new hw_app_eth_1.default(ledgerConnection);
        return ledgerEthClient;
    });
}
exports.ledgerEthereumBrowserClientFactoryAsync = ledgerEthereumBrowserClientFactoryAsync;
var subprovider_utils_1 = require("./utils/subprovider_utils");
exports.prependSubprovider = subprovider_utils_1.prependSubprovider;
var empty_wallet_subprovider_1 = require("./subproviders/empty_wallet_subprovider");
exports.EmptyWalletSubprovider = empty_wallet_subprovider_1.EmptyWalletSubprovider;
var fake_gas_estimate_subprovider_1 = require("./subproviders/fake_gas_estimate_subprovider");
exports.FakeGasEstimateSubprovider = fake_gas_estimate_subprovider_1.FakeGasEstimateSubprovider;
var signer_1 = require("./subproviders/signer");
exports.SignerSubprovider = signer_1.SignerSubprovider;
var redundant_subprovider_1 = require("./subproviders/redundant_subprovider");
exports.RedundantSubprovider = redundant_subprovider_1.RedundantSubprovider;
var ledger_1 = require("./subproviders/ledger");
exports.LedgerSubprovider = ledger_1.LedgerSubprovider;
var rpc_subprovider_1 = require("./subproviders/rpc_subprovider");
exports.RPCSubprovider = rpc_subprovider_1.RPCSubprovider;
var ganache_1 = require("./subproviders/ganache");
exports.GanacheSubprovider = ganache_1.GanacheSubprovider;
var subprovider_1 = require("./subproviders/subprovider");
exports.Subprovider = subprovider_1.Subprovider;
var debug_subprovider_1 = require("./subproviders/debug_subprovider");
exports.DebugSubprovider = debug_subprovider_1.DebugSubprovider;
var nonce_tracker_1 = require("./subproviders/nonce_tracker");
exports.NonceTrackerSubprovider = nonce_tracker_1.NonceTrackerSubprovider;
var private_key_wallet_1 = require("./subproviders/private_key_wallet");
exports.PrivateKeyWalletSubprovider = private_key_wallet_1.PrivateKeyWalletSubprovider;
var mnemonic_wallet_1 = require("./subproviders/mnemonic_wallet");
exports.MnemonicWalletSubprovider = mnemonic_wallet_1.MnemonicWalletSubprovider;
var metamask_subprovider_1 = require("./subproviders/metamask_subprovider");
exports.MetamaskSubprovider = metamask_subprovider_1.MetamaskSubprovider;
var trezor_1 = require("./subproviders/trezor");
exports.TrezorSubprovider = trezor_1.TrezorSubprovider;
var types_1 = require("./types");
exports.NonceSubproviderErrors = types_1.NonceSubproviderErrors;
//# sourceMappingURL=index.js.map